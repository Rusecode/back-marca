// schema.prisma

datasource db {
  provider = "postgresql" // ou o banco de dados que você estiver usando
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  password     String
  cart         Cart?
  purchases    Purchase[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  status    CartStatus  @default(PENDING) // Status do carrinho
  products  ProductInCart[]
  user      User        @relation(fields: [userId], references: [id])
}

model Product {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String?
  cartItems   ProductInCart[]
  purchases   Purchase[]
}

model ProductInCart {
  id        Int       @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Purchase {
  id        Int       @id @default(autoincrement())
  userId    Int
  products  ProductInPurchase[]
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model ProductInPurchase {
  id        Int       @id @default(autoincrement())
  purchaseId Int
  productId Int
  quantity  Int
  purchase  Purchase   @relation(fields: [purchaseId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
}

// Enum para status do carrinho
enum CartStatus {
  PENDING   // Produto visualizado ou adicionado ao carrinho, mas não finalizado
  IN_CART   // Produto adicionado ao carrinho
  CHECKED_OUT // Produto finalizado para compra
}
